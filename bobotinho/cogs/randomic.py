# -*- coding: utf-8 -*-
import random

from bobotinho.commands import Bot, Cog, Context, command, cooldown, helper

class RandomCog(Cog):

    def __init__(self, bot: Bot):
        self.bot = bot

    @command(aliases=["%"])
    @cooldown(rate=1, per=5)
    @helper(description="Receba uma probabilidade de 0 a 100")
    async def chance(self, ctx: Context) -> None:
        percentage = random.randint(0, 1000) / 10
        ctx.response = f"{percentage}%"

    @command(aliases=["choose", "pick"])
    @cooldown(rate=1, per=5)
    @helper(description="Sorteia uma das op√ß√µes fornecidas", usage='digite o comando e op√ß√µes separadas por "ou", v√≠rgula ou espa√ßo')
    async def choice(self, ctx: Context, *, content: str) -> None:
        delimiter = " ou " if " ou " in content else "," if "," in content else " "
        options = content.split(delimiter)
        ctx.response = random.choice(options).replace("?", "")

    @command(aliases=["coinflip", "cf"])
    @cooldown(rate=1, per=5)
    @helper(description="Jogue uma moeda e veja se deu cara ou coroa")
    async def coin(self, ctx: Context) -> None:
        percentage = random.randint(0, 6000)  # Murray & Teare (1993)
        if percentage > 3000:
            ctx.response = "voc√™ jogou uma moeda e ela caiu em cara"
        elif percentage < 3000:
            ctx.response = "voc√™ jogou uma moeda e ela caiu em coroa"
        else:
            ctx.response = "voc√™ jogou uma moeda e ela caiu no meio, em p√©!"

    @command(aliases=["8ball"])
    @cooldown(rate=1, per=5)
    @helper(description="Tenha sua pergunta respondida por uma previs√£o", usage="digite o comando e uma pergunta para receber uma previs√£o")
    async def magicball(self, ctx: Context, *, content: str) -> None:
        predict = random.choice(
            [
                "ao meu ver, sim",
                "com certeza",
                "com certeza n√£o",
                "concentre-se e pergunte novamente",
                "decididamente sim",
                "definitivamente sim",
                "dificilmente",
                "√© complicado...",
                "√© melhor voc√™ n√£o saber",
                "fontes dizem que n√£o",
                "imposs√≠vel isso acontecer",
                "imposs√≠vel prever isso",
                "jamais",
                "muito duvidoso",
                "nunca",
                "n√£o",
                "n√£o conte com isso",
                "n√£o √© poss√≠vel prever isso",
                "pergunta nebulosa, tente novamente",
                "pergunte novamente mais tarde...",
                "pode apostar que sim",
                "possivelmente",
                "provavelmente...",
                "sem d√∫vidas",
                "sim",
                "sinais apontam que sim",
                "talvez",
                "voc√™ ainda tem d√∫vidas?",
                "voc√™ n√£o acreditaria...",
            ]
        )
        ctx.response = f"{predict} üé±"

    @command(aliases=["rcg"])
    @cooldown(rate=1, per=5)
    @helper(description="Gere uma cor hexadecimal aleat√≥ria")
    async def randomcolor(self, ctx: Context) -> None:
        color = f"#{random.randint(0, 0xFFFFFF):06X}"
        ctx.response = f"aqui est√° uma cor aleat√≥ria: {color}"

    @command(aliases=["rng"])
    @cooldown(rate=1, per=5)
    @helper(description="Gere um n√∫mero aleat√≥rio dentre o intervalo fornecido", usage="digite o comando e o n√∫mero inicial e final do intervalo separados por espa√ßo")
    async def randomnumber(self, ctx: Context, min: str = "1", max: str = "100") -> None:
        init = int(arg1)
        end = int(arg2)
        if init > end:
            init, end = end, init
        if init == end:
            ctx.response = "n√£o ser√° aleat√≥rio com esse intervalo..."
        else:
            number = random.randint(init, end)
            ctx.response = f"aqui est√° um n√∫mero al√©atorio: {number}"

    @command(aliases=["dice"])
    @cooldown(rate=1, per=5)
    @helper(description="Role um dado e veja o resultado", usage="digite o comando e o(s) dado(s) no formato <quantidade>d<lados> (ex: 1d20)")
    async def roll(self, ctx: Context, dices: str = "") -> None:
        if not dices or "d" not in dices:
            dices = "1d20"
        dices = dices.lower().split("d")
        amount = int(dices[0].replace(",", ".")) if dices[0] else None
        sides = int(dices[1].replace(",", ".")) if dices[1] else None
        if not amount:
            ctx.response = "especifique a quantidade de dados"
        elif not sides:
            ctx.response = "especifique a quantidade de lados do dado"
        elif amount > 1e4:
            ctx.response = "eu n√£o tenho tantos dados"
        elif amount == 0:
            ctx.response = "eu n√£o consigo rolar sem dados"
        elif amount < 0:
            ctx.response = "n√£o tente tirar meus dados de mim"
        elif sides > 1e4:
            ctx.response = "meus dados n√£o tem tantos lados"
        elif sides == 1:
            ctx.response = f"um dado de {sides} lado? Esse √© um exerc√≠cio topol√≥gico interessante..."
        elif sides <= 0:
            ctx.response = f"um dado de {sides} lados? Esse √© um exerc√≠cio topol√≥gico interessante..."
        else:
            roll = sum([random.randint(1, round(sides)) for i in range(round(amount))])
            ctx.response = f"voc√™ rolou {roll} üé≤"


def prepare(bot: Bot) -> None:
    bot.add_cog(RandomCog(bot))
