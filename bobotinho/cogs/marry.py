# -*- coding: utf-8 -*-
from bobotinho.bot import Bot, Context, command, commands
from bobotinho.models import Cookie, User, Wedding


def to_username(name: str) -> str:
    return name.lstrip("@").rstrip(",").lower() if name else ""


class Weddings(commands.Cog):

    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    async def cog_check(self, ctx: Context) -> bool:
        if not await Cookie.exists(id=ctx.author.id):
            await Cookie.create(id=ctx.author.id, name=ctx.author.name)
        return True

    @command(usage="digite o comando e o nome de quem voc√™ quer pedir em casamento")
    async def marry(self, ctx: Context, name: str) -> None:
        # TODO: otimizar a quantidade de consultas no banco e os if/else
        name = to_username(name)
        if name == ctx.bot.nick:
            ctx.response = "n√£o fui programado para fazer parte de um relacionamento"
        elif name == ctx.author.name:
            ctx.response = "voc√™ n√£o pode se casar com voc√™ mesmo..."
        elif not (user_2 := await User.get_or_none(name=name)):
            ctx.response = f"@{name} ainda n√£o foi registrado (n√£o usou nenhum comando)"
        elif someone := ctx.bot.cache.get(f"marry-{ctx.author.name}"):
            ctx.response = (
                f"antes voc√™ precisa responder ao pedido de @{someone}! "
                f'Digite "{ctx.prefix}yes" ou "{ctx.prefix}no"'
            )
        elif someone := ctx.bot.cache.get(f"marry-{name}"):
            ctx.response = f"@{someone} chegou primeiro e j√° fez uma proposta √† m√£o de @{name}"
        elif len(await Wedding.find_all(ctx.author.id)) >= (1 + int((await User.get(id=ctx.author.id)).sponsor)):
            ctx.response = "voc√™ j√° est√° com o n√∫mero m√°ximo de relacionamentos, n√£o √© o suficiente?"
        elif await Wedding.find(ctx.author.id, user_2.id):
            ctx.response = "voc√™s dois j√° s√£o casados... n√£o se lembra?"
        elif len(await Wedding.find_all(user_2.id)) >= (1 + int(user_2.sponsor)):
            ctx.response = f"@{name} j√° est√° com o n√∫mero m√°ximo de relacionamentos, n√£o h√° espa√ßo para mais um..."
        elif (await Cookie.get(name=ctx.author.name)).stocked < 100:
            ctx.response = "para pagar a alian√ßa e todo o cas√≥rio, voc√™ deve ter 100 cookies estocados"
        else:
            ctx.bot.cache.set(f"marry-{name}", ctx.author.name, ex=180)
            ctx.response = (
                f"voc√™ pediu a m√£o de @{name}, o usu√°rio deve "
                f'digitar "{ctx.prefix}yes" ou "{ctx.prefix}no" üíêüíç'
            )

    @command(usage="digite o comando e o nome da pessoa com quem se casou para se divorciar")
    async def divorce(self, ctx: Context, name: str) -> None:
        name = to_username(name)
        if name == ctx.bot.nick:
            ctx.response = "eu nunca estaria casado com voc√™"
        elif name == ctx.author.name:
            ctx.response = "voc√™ n√£o pode se livrar de voc√™ mesmo"
        elif not await Wedding.find(ctx.author.id):
            ctx.response = "voc√™ n√£o est√° casado com ningu√©m"
        elif not (user := await User.get_or_none(name=name)):
            ctx.response = f"@{name} ainda n√£o foi registrado (n√£o usou nenhum comando)"
        elif wedding := await Wedding.find(ctx.author.id, user.id):
            await wedding.divorce()
            ctx.response = (
                "ent√£o, √© isso... da pr√≥xima vez, case-se com algu√©m "
                "que realmente te ame, e n√£o qualquer pessoa por a√≠"
            )
        else:
            ctx.response = "voc√™ n√£o sabe nem o nome da pessoa com quem est√° casado?"

    @command(usage="digite o comando e o nome da pessoa com quem se casou para se divorciar")
    async def marriage(self, ctx: Context, name: str) -> None:
        name = to_username(name) or ctx.author.name
        mention = "voc√™" if name == ctx.author.name else f"@{name}"
        if name == ctx.bot.nick:
            ctx.response = "nunca me casarei com ningu√©m"
        elif not (user := await User.get_or_none(name=name)):
            ctx.response = f"@{name} ainda n√£o foi registrado (n√£o usou nenhum comando)"
        elif (weddings := await Wedding.find_all(user.id)):
            users = [await wedding.spouse(name) for wedding in weddings]
            timeago = [wedding.created_ago for wedding in weddings]
            if len(weddings) == 1:
                ctx.response = f"{mention} est√° casado com @{users[0].name} h√° {timeago[0]}"
            else:
                ctx.response = (
                    f"{mention} est√° casado com @{users[0].name} h√° {timeago[0]} e "
                    f"com @{users[1].name} h√° {timeago[1]}"
                )
        else:
            ctx.response = f"{mention} n√£o est√° casado com ningu√©m"


def prepare(bot: Bot) -> None:
    bot.add_cog(Weddings(bot))
